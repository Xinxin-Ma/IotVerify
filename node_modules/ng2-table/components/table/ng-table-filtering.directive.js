var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('angular2/core');
function setProperty(renderer, elementRef, propName, propValue) {
    renderer.setElementProperty(elementRef, propName, propValue);
}
var NgTableFiltering = (function () {
    function NgTableFiltering(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.config = {
            filterString: '',
            columnName: 'name'
        };
        this.tableChanged = new core_1.EventEmitter();
        setProperty(this.renderer, this.element, 'value', this.config.filterString);
    }
    NgTableFiltering.prototype.onChangeFilter = function (event) {
        this.config.filterString = event;
        this.tableChanged.emit({ filtering: this.config });
    };
    NgTableFiltering = __decorate([
        core_1.Directive({
            selector: '[ngTableFiltering]',
            inputs: ['config: ngTableFiltering'],
            outputs: ['tableChanged'],
            host: {
                '(input)': 'onChangeFilter($event.target.value)'
            }
        }), 
        __metadata('design:paramtypes', [core_1.ElementRef, core_1.Renderer])
    ], NgTableFiltering);
    return NgTableFiltering;
})();
exports.NgTableFiltering = NgTableFiltering;
//# sourceMappingURL=ng-table-filtering.directive.js.map